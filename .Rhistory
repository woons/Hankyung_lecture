library(rvest)
url <- "https://www.si.re.kr/node/56694"
h <- read_html(url)
table <- html_table(h)
table_1 <- data.frame(table[1])
table_2 <- data.frame(table[5])
View(table_1)
View(table_2)
library(tidyverse)
table_1 <- data.frame(table[1]) %>%
head
table_1 <- data.frame(table[1]) %>%
head()
table_1 <- data.frame(table[1])
table_1 <- data.frame(table[1]) %>%
head()
table_1 <- data.frame(table[1])
table_1 %>% head
colnames(table_1) <- c("year", "1995", "2000", "2005", "2010", "2015")
View(table_1)
head(table_2)
colnames(table_2) <- c("type", "year", "single", "apt", "couple", "multi", "etc", "total", "sum")
colnames(table_2) <- c("type", "year", "single", "apt", "couple", "multi", "etc", "total")
View(table_2)
write.csv(table_1, "table1.csv")
h2 <- read_html("http://ticket2.movie.daum.net/movie/movieranklist.aspx")
url2 <- read_html("http://ticket2.movie.daum.net/movie/movieranklist.aspx")
url2 <- "http://ticket2.movie.daum.net/movie/movieranklist.aspx"
h2 <- read.html(url2)
h2 <- read_html(url2)
movie.title <- html_nodes(".link_g")
movie.title <- html_node(".link_g")
movie.title <- html_nodes(h2, ".link_g")
movie.title <- html_nodes(h2, ".link_g")
movie.title <- html_nodes(h2, ".link_g") %>% html_text()
movie.title <- html_nodes(h2, ".link_g") %>% html_text
movie.title <- html_nodes(h2, ".link_g") %>% html_text
movie.title <- html_nodes(h2, ".link_g") %>% html_text %>% data.frame
View(movie.title)
movie.score <- html_nodes(h2, "txt_grade") %>%
html_text %>%
data.frame
View(movie.score)
movie.score <- html_nodes(h2, "txt_grade") %>% html_text
View(movie.title)
movie.score <- html_nodes(h2, ".txt_grade") %>% html_text
movie.score <- html_nodes(h2, ".txt_grade") %>%
html_text %>%
data.frame
View(movie.score)
movie.score <- html_nodes(h2, ".emph_grade") %>%
html_text %>%
data.frame
View(movie.score)
movie.score <- html_nodes(h2, ".emph_grade") %>%
as.numeric %>%
html_text %>%
data.frame
View(movie.score)
movie.score <- html_nodes(h2, ".emph_grade") %>%
html_text %>%
as.numeric %>%
data.frame
View(movie.score)
movie.score <- html_nodes(h2, ".emph_grade") %>%
html_text %>%
as.numeric %>%
data.frame(label = "score")
View(movie.score)
movie.score <- html_nodes(h2, ".emph_grade") %>%
html_text %>%
as.numeric %>%
data.frame
movie.title <- html_nodes(h2, ".link_g") %>%
html_text %>%
data.frame %>%
rename("title")
movie.title <- html_nodes(h2, ".link_g") %>%
html_text %>%
data.frame %>%
select(.=title)
movie.title %>% select(.=title)
select(movie.title, .=title)
movie.title <- html_nodes(h2, ".link_g") %>%
html_text %>%
data.frame %>%
rename(c('.' = "title"))
movie.title <- html_nodes(h2, ".link_g") %>%
html_text %>%
data.frame %>%
named(c('.' = "title"))
movie.title <- html_nodes(h2, ".link_g") %>%
html_text %>%
data.frame
url <- "http://movie.naver.com/movie/point/af/list.nhn?st=mcode&sword=102875&target=&page="
res <- GET(url)
h <- read_html(res, encoding = "ms949")
h <- read_html(url, encoding = "ms949")
h
h <- read_html(url) #윈도우의 경우 ms949
h
first_page_final <- NULL
for(i in 1:10) {
url <- paste0("http://movie.naver.com/movie/point/af/list.nhn?st=mcode&sword=102875&target=&page=",i)
res <- GET(url)
h <- read_html(res, encoding = "ms949")
#코멘트
comment_next <- html_nodes(h, xpath = "//*[@id='old_content']/table/tbody/tr/td[4]/text()")
comment_next <- html_text(comment_next)
comment_next <- str_trim(comment_next)
comment_next <- comment_next[comment_next != ""]
#평점
rate_next <- html_nodes(h, ".point")
rate_next <- html_text(rate_next)
#날짜
date_next <- html_nodes(h, xpath = "//*[@id='old_content']/table/tbody/tr/td[5]/text()")
date_next <- html_text(date_next)
#아이디
id_next <- html_nodes(h, xpath = "//*[@id='old_content']/table/tbody/tr/td[5]/a/text()")
id_next <- html_text(id_next)
#데이터프레임으로 변환
final_page <- data.frame(date_next, comment_next, rate_next, id_next)
#결합
first_page_final <- rbind(first_page_final, final_page)
}
for(i in 1:10) {
url <- paste0("http://movie.naver.com/movie/point/af/list.nhn?st=mcode&sword=102875&target=&page=",i)
h <- read_html(url, encoding = "ms949")
#코멘트
comment_next <- html_nodes(h, xpath = "//*[@id='old_content']/table/tbody/tr/td[4]/text()")
comment_next <- html_text(comment_next)
comment_next <- str_trim(comment_next)
comment_next <- comment_next[comment_next != ""]
#평점
rate_next <- html_nodes(h, ".point")
rate_next <- html_text(rate_next)
#날짜
date_next <- html_nodes(h, xpath = "//*[@id='old_content']/table/tbody/tr/td[5]/text()")
date_next <- html_text(date_next)
#아이디
id_next <- html_nodes(h, xpath = "//*[@id='old_content']/table/tbody/tr/td[5]/a/text()")
id_next <- html_text(id_next)
#데이터프레임으로 변환
final_page <- data.frame(date_next, comment_next, rate_next, id_next)
#결합
first_page_final <- rbind(first_page_final, final_page)
}
library(tidyverse)
library(stringr)
for(i in 1:10) {
url <- paste0("http://movie.naver.com/movie/point/af/list.nhn?st=mcode&sword=102875&target=&page=",i)
h <- read_html(url, encoding = "ms949")
#코멘트
comment_next <- html_nodes(h, xpath = "//*[@id='old_content']/table/tbody/tr/td[4]/text()")
comment_next <- html_text(comment_next)
comment_next <- str_trim(comment_next)
comment_next <- comment_next[comment_next != ""]
#평점
rate_next <- html_nodes(h, ".point")
rate_next <- html_text(rate_next)
#날짜
date_next <- html_nodes(h, xpath = "//*[@id='old_content']/table/tbody/tr/td[5]/text()")
date_next <- html_text(date_next)
#아이디
id_next <- html_nodes(h, xpath = "//*[@id='old_content']/table/tbody/tr/td[5]/a/text()")
id_next <- html_text(id_next)
#데이터프레임으로 변환
final_page <- data.frame(date_next, comment_next, rate_next, id_next)
#결합
first_page_final <- rbind(first_page_final, final_page)
}
View(first_page_final)
cross.table <- read.csv("education.csv", stringsAsFactors = F)
head(cross.table)
colnames(cross.table) <- c("year", "elementary", "middle", "high", "general")
View(cross.table)
str(cross.table)
long.table <-gather(cross.table, "category", "price", 2:7)
long.table <-gather(cross.table, "category", "price", 2:5)
View(long.table)
wide.table <- spread(long.table, c("elementary", "middle", "high", "general"))
wide.table <- spread(long.table, "category", "price")
View(wide.table)
View(long.table)
ggplot(long.table, aes(x=year, y=price, group=category, colour =category)) +
geom_line()
ggplot(long.table, aes(x=year, y=price, group=category, colour =category)) +
geom_line() +
ggtitle("학생 1인당 사교육비 평균/학교 분류별")
library(ggplot2)
practice.str <- read.csv("salary.csv", stringsAsFactors = F)
library(gcookbook)
str(pg_mean)
str(pg_mean)
View(pg_mean)
str(cabbage_exp)
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +
geom_bar(stat = "identity", position = "dodge")
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +
geom_bar(stat = "identity", position = "stacked")
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +
geom_bar(stat = "identity", position = "stacked")
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +
geom_bar(stat = "identity")
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +
geom_bar(stat = "identity", position = "dodge")
diamonds
ggplot(diamonds, aes(x=cut)) + geom_histogram()
ggplot(diamonds, aes(x=cut)) + geom_histogram(stat = "bin")
ggplot(diamonds, aes(x=cut)) + geom_histogram(stat = "count")
str(diamonds)
ggplot(long.table, aes(x=year, y=price, group=category, colour =category)) +
geom_line() +
ggtitle("학생 1인당 사교육비 평균/학교 분류별")
bar.data <- climate %>% filter(Source == "Berkeley" && Year >= 1990)
bar.data <- climate %>% filter(Source == "Berkeley" && Year >= 1900)
ggplot(bar.data, aes(Year, Anomaly10y, fill=pos)) +
geom_bar(stat = "identity", position = "identity")
bar.data
bar.data <- climate %>% filter(Source == "Berkeley" & Year >= 1900)
View(bar.data)
ggplot(bar.data, aes(Year, Anomaly10y, fill=pos)) +
geom_bar(stat = "identity", position = "identity")
head(bar.data)
bar.data$test <- bar.data$Anomaly10y >= 0
ggplot(bar.data, aes(Year, Anomaly10y, fill=pos)) +
geom_bar(stat = "identity", position = "identity")
ggplot(bar.data, aes(Year, Anomaly10y, fill=test)) +
geom_bar(stat = "identity", position = "identity")
ggplot(bar.data, aes(Year, Anomaly10y, fill=test)) +
geom_bar(stat = "identity", position = "identity") +
ylab("value")
ggplot(bar.data, aes(Year, Anomaly10y, fill=test)) +
geom_bar(stat = "identity", position = "identity") +
ylab("value") +
xlab("year")
